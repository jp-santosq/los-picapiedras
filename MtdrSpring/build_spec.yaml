version: 0.1
component: build
timeoutInSeconds: 1800
shell: bash

env:
  variables:
    JAVA_HOME: /usr/lib64/graalvm/graalvm22-ee-java17
    OCIR_TOKEN_SECRET_OCID: "ocid1.vaultsecret.oc1.mx-queretaro-1.amaaaaaaqvjbf6iaeqvlf7pnrtvcmrwsodhpchorkgfgps73vz3v776jstaa"

    # üëá Variables requeridas por build.sh
    DOCKER_REGISTRY: qro.ocir.io/axvik3xzohce/reacttodo/9zgw9
    IMAGE_VERSION: "0.1"

  exportedVariables:
    - BuildServiceDemoVersion

steps:
  # -------------------------------
  # üß© Instalar dependencias del sistema
  # -------------------------------
  - type: Command
    name: "Enable CRB repo and install native-image deps"
    timeoutInSeconds: 900
    command: |
      set -euo pipefail
      echo "üîß Enabling required repos and installing system deps..."
      yum -y install dnf-plugins-core || true
      yum config-manager --set-enabled ol8_codeready_builder
      yum config-manager --set-enabled ol8_addons || true
      yum -y install gcc gcc-c++ glibc-devel zlib-devel glibc-static libstdc++-static zlib-static
      echo "‚úÖ Dependencies installed."

  # -------------------------------
  # ‚òï Instalar GraalVM Enterprise
  # -------------------------------
  - type: Command
    name: "Install GraalVM Enterprise 22.x Native Image for Java17"
    timeoutInSeconds: 900
    command: |
      set -euo pipefail
      echo "üì¶ Installing GraalVM Enterprise 22 for Java 17..."
      yum -y install graalvm22-ee-17-native-image
      echo "‚úÖ GraalVM installation complete."

  # -------------------------------
  # ‚öôÔ∏è Configurar PATH de Java
  # -------------------------------
  - type: Command
    name: "Set PATH Variable"
    command: |
      set -e
      export PATH=$JAVA_HOME/bin:$PATH
      echo "PATH set to: $PATH"

  # -------------------------------
  # üîê Docker Login leyendo el secreto del Vault
  # -------------------------------
  - type: Command
    name: "Docker Login (read Vault secret at build time)"
    timeoutInSeconds: 600
    command: |
      set -euo pipefail

      if [ -z "${OCIR_TOKEN_SECRET_OCID:-}" ]; then
        echo "‚ùå OCIR_TOKEN_SECRET_OCID no est√° definido."
        exit 1
      fi

      echo "üîé Fetching OCIR auth token from OCI Vault..."
      TOKEN_B64=$(oci secrets secret-bundle get \
        --secret-id "${OCIR_TOKEN_SECRET_OCID}" \
        --stage CURRENT \
        --query 'data."secret-bundle-content".content' \
        --raw-output)

      if [ -z "${TOKEN_B64:-}" ]; then
        echo "‚ùå No se obtuvo contenido del secreto (revisa policies/Vault/OCID)."
        exit 1
      fi

      TOKEN=$(printf '%s' "${TOKEN_B64}" | base64 -d || true)
      if [ -z "${TOKEN:-}" ]; then
        echo "‚ùå No se pudo decodificar el contenido del secreto."
        exit 1
      fi

      echo "üîê Logging in to OCIR..."
      printf '%s' "${TOKEN}" | docker login -u "axvik3xzohce/a00836080@tec.mx" --password-stdin qro.ocir.io
      echo "‚úÖ Docker login successful."

  # -------------------------------
  # üèóÔ∏è Build del backend (usa tus variables)
  # -------------------------------
  - type: Command
    name: "Build Spring Boot backend"
    timeoutInSeconds: 1200
    command: |
      set -euo pipefail
      cd MtdrSpring/backend
      echo "üöÄ Starting build process..."

      # üîß Blindaje: asegurar que DOCKER_REGISTRY/IMAGE_VERSION est√©n definidos
      export DOCKER_REGISTRY="${DOCKER_REGISTRY:-qro.ocir.io/axvik3xzohce/reacttodo/9zgw9}"
      export IMAGE_VERSION="${IMAGE_VERSION:-0.1}"

      chmod +x build.sh || true
      ./build.sh
      echo "‚úÖ Backend build completed successfully."

  # -------------------------------
  # üîñ Normalizar nombre del artefacto a app.jar
  # -------------------------------
  - type: Command
    name: "Normalize artifact name"
    command: |
      set -euo pipefail
      cd MtdrSpring/backend/target
      ls -al
      JAR=$(ls -1t *.jar | head -n1)
      if [ -z "${JAR:-}" ]; then
        echo "‚ùå No se encontr√≥ ning√∫n JAR en target/"
        exit 1
      fi
      echo "üì¶ Usando JAR: $JAR"
      cp -f "$JAR" app.jar

# -------------------------------
# üì¶ Output Artifacts
# -------------------------------
outputArtifacts:
  - name: backend-jar
    type: BINARY
    location: MtdrSpring/backend/target/app.jar
